# 🧭 CHRAVEL ENGINEERING MANIFESTO
> **For Cursor AI** - Read this file for all coding standards
> **Full Documentation:** See CLAUDE.md for complete details
> **Non-negotiable:** Every edit must pass `npm run lint && npm run typecheck && npm run build` before commit

---

## ⚠️ CRITICAL: READ CLAUDE.md FOR FULL STANDARDS

This file provides quick reference. **Always consult CLAUDE.md** for:
- Complete React patterns
- Supabase integration rules
- Google Maps implementation patterns
- Error prevention strategies
- Full code examples

---

## ⚙️ GLOBAL PRINCIPLES

### 1. Zero Syntax Errors
- Every `{}`, `()`, `[]`, and JSX tag must close cleanly
- Before returning code, mentally simulate: `npm run build`
- If uncertain about bracket balance → simplify the structure

### 2. TypeScript Strict Mode
- `"strict": true` in `tsconfig.json` enforced
- All function parameters and return types explicitly typed
- No `any` types unless interfacing with untyped third-party libs (comment why)

### 3. Vite Production Environment
- Code must compile in fresh Node 18+ environment
- No experimental syntax (e.g., decorators, stage-3 proposals)
- Test locally with `npm run dev` before pushing

### 4. Readability > Cleverness
- Explicit variable names: `userTrips` not `ut`
- Separate concerns: one function = one responsibility
- Comment complex logic (especially map calculations, state transitions)

---

## 🧠 REACT PATTERNS

### Component Structure
```tsx
// ✅ GOOD: Hooks first, handlers next, return last
export function TripCard({ trip }: { trip: Trip }) {
  const [isExpanded, setIsExpanded] = useState(false);
  const router = useNavigate();

  const handleExpand = useCallback(() => {
    setIsExpanded(prev => !prev);
  }, []);

  return <div>{/* JSX */}</div>;
}

// ❌ BAD: Hooks inside conditionals
if (user) {
  const [trips, setTrips] = useState([]); // BREAKS RULES OF HOOKS
}
```

### State Management Rules
- Always type `useState`: `const [trips, setTrips] = useState<Trip[]>([]);`
- Always cleanup in `useEffect` returns (prevent memory leaks)
- Compute derived state above return, don't store in state
- Memoize handlers passed as props with `useCallback`
- Guard against null/undefined in all handlers

---

## 🗄️ SUPABASE INTEGRATION

### Rules
1. **Never** call Supabase directly in JSX (`onClick={() => supabase.from...}`)
2. **Always** go through `/src/integrations/supabase/client.ts`
3. **Handle** `error` explicitly (don't ignore it)
4. **Type** results using generated `Database` types from Supabase CLI

### Standard Pattern
```tsx
const { data: trips, error } = await supabase
  .from('trips')
  .select('*')
  .eq('creator_id', userId);

if (error) {
  console.error('Failed to fetch trips:', error);
  setError(error.message);
  return;
}

setTrips(trips ?? []);
```

---

## 🗺️ GOOGLE MAPS / PLACES / LOCATION LOGIC

### Critical Rules
1. **One map instance per page** — use props/context for mode changes
2. **Always null-check** `mapRef.current` before operations
3. **Debounce** high-frequency events (drag, zoom, bounds_changed)
4. **Clean up** event listeners in `useEffect` return
5. **Type all coordinates** as `{ lat: number; lng: number }`

### Map Initialization Pattern
```tsx
const mapRef = useRef<google.maps.Map | null>(null);
const mapContainerRef = useRef<HTMLDivElement>(null);

useEffect(() => {
  if (!mapContainerRef.current || mapRef.current) return;

  mapRef.current = new google.maps.Map(mapContainerRef.current, {
    center: { lat: 34.0522, lng: -118.2437 },
    zoom: 12,
    disableDefaultUI: false,
    zoomControl: true,
  });
}, []);
```

---

## 🧰 ERROR PREVENTION

### Pre-Commit Requirements
Every commit must pass:
```bash
npm run lint        # ESLint with auto-fix
npm run typecheck   # TypeScript validation
npm run build       # Production build test
```

### Common Errors to Avoid
- ❌ Unclosed brackets/braces
- ❌ Missing return statements in arrow functions
- ❌ Hooks inside conditionals
- ❌ Untyped state variables
- ❌ Ignoring error objects from async calls
- ❌ Not cleaning up event listeners

---

## 🤖 AI AGENT CONDUCT

### Required Behavior
1. **Validate syntax** before returning code
2. **Test mentally:** Would `npm run build` pass?
3. **Preserve context:** Don't break existing working code
4. **Comment complex logic** (especially algorithms, state machines)
5. **Use stable APIs only** (no stage-3 proposals)

### Prohibited Actions
1. ❌ Outputting **partial code** that won't compile
2. ❌ Using **experimental syntax** not in TypeScript 5
3. ❌ Creating **duplicate implementations** of existing components
4. ❌ Ignoring **error objects** from async calls
5. ❌ Adding **console.log** without removing before commit

---

## ✅ FINAL RULE

> **"If it doesn't build, it doesn't ship."**

Every change must:
1. Pass `npm run lint && npm run typecheck && npm run build`
2. Have clean syntax (balanced brackets, proper JSX)
3. Have explicit types (no `any` unless documented)
4. Follow patterns in **CLAUDE.md** (read it!)
5. Be ready for Vercel deployment

---

## 📚 QUICK REFERENCE

### Key Files
- `/src/integrations/supabase/client.ts` — Supabase singleton
- `/src/types/` — Type definitions
- `/src/components/` — Reusable components
- `/src/lib/` — Utility functions

### Quick Commands
```bash
npm run dev          # Local dev server
npm run lint         # Check linting
npm run typecheck    # Check types
npm run build        # Production build
npm run validate     # Run all checks
```

---

**📖 For complete details, patterns, and examples: Read CLAUDE.md**
**Last Updated:** 2025-10-31
