/**
 * Client-Side PDF Export Fallback
 * Generates PDFs using jsPDF when server export fails or for mock trips
 */

import jsPDF from 'jspdf';
import 'jspdf-autotable';
import { ExportSection } from '@/types/tripExport';

interface ExportData {
  tripId: string;
  tripTitle: string;
  destination?: string;
  dateRange?: string;
  description?: string;
}

export async function generateClientPDF(
  data: ExportData,
  sections: ExportSection[],
  layout: 'onepager' | 'pro',
  paper: 'letter' | 'a4' = 'letter'
): Promise<Blob> {
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'pt',
    format: paper === 'a4' ? 'a4' : 'letter',
  });

  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 40;
  const contentWidth = pageWidth - 2 * margin;
  let yPos = margin;

  // Header
  doc.setFontSize(24);
  doc.setFont('helvetica', 'bold');
  doc.text(data.tripTitle, margin, yPos);
  yPos += 30;

  if (data.destination) {
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text(data.destination, margin, yPos);
    yPos += 20;
  }

  if (data.dateRange) {
    doc.setFontSize(11);
    doc.setTextColor(100);
    doc.text(data.dateRange, margin, yPos);
    yPos += 20;
  }

  if (data.description) {
    doc.setFontSize(10);
    doc.setTextColor(80);
    const splitDesc = doc.splitTextToSize(data.description, contentWidth);
    doc.text(splitDesc, margin, yPos);
    yPos += splitDesc.length * 14 + 10;
  }

  // Add a separator line
  doc.setDrawColor(200);
  doc.line(margin, yPos, pageWidth - margin, yPos);
  yPos += 30;

  // Sections
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(0);

  // Calendar section
  if (sections.includes('calendar')) {
    checkPageBreak(doc, yPos, 40);
    doc.text('Calendar', margin, yPos);
    yPos += 20;
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text('No calendar events available in demo mode', margin, yPos);
    yPos += 30;
  }

  // Payments section
  if (sections.includes('payments')) {
    checkPageBreak(doc, yPos, 40);
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Payments', margin, yPos);
    yPos += 20;
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text('No payment records available in demo mode', margin, yPos);
    yPos += 30;
  }

  // Polls section
  if (sections.includes('polls')) {
    checkPageBreak(doc, yPos, 40);
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Polls', margin, yPos);
    yPos += 20;
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text('No polls available in demo mode', margin, yPos);
    yPos += 30;
  }

  // Places section
  if (sections.includes('places')) {
    checkPageBreak(doc, yPos, 40);
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Places & Links', margin, yPos);
    yPos += 20;
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text('No places saved in demo mode', margin, yPos);
    yPos += 30;
  }

  // Tasks section
  if (sections.includes('tasks')) {
    checkPageBreak(doc, yPos, 40);
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Tasks', margin, yPos);
    yPos += 20;
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text('No tasks available in demo mode', margin, yPos);
    yPos += 30;
  }

  // Pro sections
  if (layout === 'pro') {
    if (sections.includes('roster')) {
      checkPageBreak(doc, yPos, 40);
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('Roster & Contacts', margin, yPos);
      yPos += 20;
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.text('No roster data available in demo mode', margin, yPos);
      yPos += 30;
    }

    if (sections.includes('broadcasts')) {
      checkPageBreak(doc, yPos, 40);
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('Broadcast Log', margin, yPos);
      yPos += 20;
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.text('No broadcasts available in demo mode', margin, yPos);
      yPos += 30;
    }

    if (sections.includes('attachments')) {
      checkPageBreak(doc, yPos, 40);
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('Attachments', margin, yPos);
      yPos += 20;
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.text('No attachments available in demo mode', margin, yPos);
      yPos += 30;
    }
  }

  // Footer
  const pageHeight = doc.internal.pageSize.getHeight();
  doc.setFontSize(8);
  doc.setTextColor(120);
  doc.text(
    `Generated by Chravel • ${new Date().toLocaleString()} • Trip ID: ${data.tripId}`,
    margin,
    pageHeight - 20
  );

  return doc.output('blob');
}

function checkPageBreak(doc: jsPDF, currentY: number, requiredSpace: number) {
  const pageHeight = doc.internal.pageSize.getHeight();
  if (currentY + requiredSpace > pageHeight - 60) {
    doc.addPage();
    return 40; // Reset to top margin
  }
  return currentY;
}
