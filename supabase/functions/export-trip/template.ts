/**
 * HTML Template Renderer for PDF Export
 */

import { getIcon } from './icons.ts';
import type { TripExportData } from './types.ts';

export function renderTemplate(data: TripExportData): string {
  const {
    tripTitle,
    subtitle,
    destination,
    startDate,
    endDate,
    deeplinkQrSvg,
    generatedAtLocal,
    layout,
    privacyRedaction,
    totals,
    roster,
    calendar,
    payments,
    polls,
    tasks,
    places,
    broadcasts,
    attachments,
  } = data;

  return `<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>${escapeHtml(tripTitle)} ‚Äì Export</title>
  <style>
    ${getStyles()}
  </style>
</head>
<body>
  <!-- Cover -->
  <div class="cover">
    <h1>Trip Executive Summary</h1>
    <div class="subtitle">Generated on ${escapeHtml(generatedAtLocal)}</div>
    <hr class="hair" />
    <h1>${escapeHtml(tripTitle)}</h1>
    ${subtitle ? `<p>${escapeHtml(subtitle)}</p>` : ''}
    <div class="meta">
      ${destination ? `Destination: ${escapeHtml(destination)}` : ''}
      ${startDate && endDate ? ` &nbsp;‚Ä¢&nbsp; Dates: ${escapeHtml(startDate)} ‚Äì ${escapeHtml(endDate)}` : ''}
    </div>
    ${deeplinkQrSvg ? `<div class="qr-container">${deeplinkQrSvg}</div>` : ''}
  </div>

  ${roster && roster.length > 0 && layout === 'ops' ? renderRoster(roster, privacyRedaction) : ''}
  ${calendar && calendar.length > 0 ? renderCalendar(calendar) : ''}
  ${payments && payments.length > 0 ? renderPayments(payments, totals) : ''}
  ${polls && polls.length > 0 ? renderPolls(polls) : ''}
  ${tasks && tasks.length > 0 ? renderTasks(tasks) : ''}
  ${places && places.length > 0 ? renderPlaces(places) : ''}
  ${broadcasts && broadcasts.length > 0 && layout === 'ops' ? renderBroadcasts(broadcasts) : ''}
  ${attachments && attachments.length > 0 && layout === 'ops' ? renderAttachments(attachments) : ''}

  <div class="footer-text">
    Generated by Chravel &nbsp;‚Ä¢&nbsp; Trip ID: ${data.tripId}
  </div>
</body>
</html>`;
}

function renderRoster(roster: any[], privacyRedaction: boolean): string {
  return `
  <section class="section">
    <h2><span class="icon">${getIcon('roster')}</span>Roster & Contacts</h2>
    <table class="table">
      <thead>
        <tr>
          <th>Name</th>
          <th>Role</th>
          <th>Dept</th>
          <th>Email</th>
          <th>Phone</th>
        </tr>
      </thead>
      <tbody>
        ${roster.map(m => `
          <tr>
            <td>${escapeHtml(m.name)}</td>
            <td>${escapeHtml(m.role || '‚Äî')}</td>
            <td>${escapeHtml(m.dept || '‚Äî')}</td>
            <td>${privacyRedaction ? '‚Äî' : escapeHtml(m.email || '‚Äî')}</td>
            <td>${privacyRedaction ? '‚Äî' : escapeHtml(m.phone || '‚Äî')}</td>
          </tr>
        `).join('')}
      </tbody>
    </table>
  </section>`;
}

function renderCalendar(calendar: any[]): string {
  return `
  <section class="section">
    <h2><span class="icon">${getIcon('calendar')}</span>Calendar</h2>
    ${calendar.map(item => `
      <div class="card">
        <div class="day-header">${escapeHtml(item.dayLabel)}</div>
        <div class="event-item">
          <strong>${escapeHtml(item.title)}</strong>
          <span class="small">&nbsp; ${escapeHtml(item.time)}</span>
          ${item.location ? `<div class="small">üìç ${escapeHtml(item.location)}</div>` : ''}
          ${item.notes ? `<div class="small">${escapeHtml(item.notes)}</div>` : ''}
        </div>
      </div>
    `).join('')}
  </section>`;
}

function renderPayments(payments: any[], totals: any): string {
  return `
  <section class="section">
    <h2><span class="icon">${getIcon('money')}</span>Payments</h2>
    ${totals?.paymentsTotal ? `<p class="small">Total: <span class="tt">${totals.paymentsTotal} ${totals.currency || 'USD'}</span></p>` : ''}
    ${payments.map(p => `
      <div class="card">
        <div><strong>${escapeHtml(p.title)}</strong> &nbsp;<span class="small">Payer: ${escapeHtml(p.payer)}</span></div>
        <div class="small">
          Amount: <span class="tt">${p.amount} ${p.currency}</span>
          &nbsp;‚Ä¢&nbsp; Status: <span class="chip ${p.status === 'Paid' ? 'success' : (p.status === 'Overdue' ? 'danger' : 'warn')}">${p.status}</span>
          ${p.due ? ` &nbsp;‚Ä¢&nbsp; Due: ${p.due}` : ''}
        </div>
        ${p.split && p.split.length > 0 ? `
          <table class="table payment-split">
            <thead>
              <tr>
                <th>Member</th>
                <th class="money">Owes</th>
                <th>Status</th>
                <th>When</th>
              </tr>
            </thead>
            <tbody>
              ${p.split.map((s: any) => `
                <tr>
                  <td>${escapeHtml(s.name)}</td>
                  <td class="money">${s.owes}</td>
                  <td>${s.paid ? 'Paid' : 'Unpaid'}</td>
                  <td>${s.paid_at || '‚Äî'}</td>
                </tr>
              `).join('')}
            </tbody>
          </table>
        ` : ''}
      </div>
    `).join('')}
  </section>`;
}

function renderPolls(polls: any[]): string {
  return `
  <section class="section">
    <h2><span class="icon">${getIcon('poll')}</span>Polls</h2>
    ${polls.map(poll => `
      <div class="card">
        <strong>${escapeHtml(poll.question)}</strong>
        <table class="table">
          <tbody>
            ${poll.options.map((opt: any) => `
              <tr>
                <td>${escapeHtml(opt.text)}</td>
                <td class="money">${opt.votes}</td>
                <td>${opt.winner ? 'üèÜ Winner' : ''}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `).join('')}
  </section>`;
}

function renderTasks(tasks: any[]): string {
  return `
  <section class="section">
    <h2><span class="icon">${getIcon('tasks')}</span>Tasks</h2>
    <table class="table">
      <thead>
        <tr>
          <th>Task</th>
          <th>Owner</th>
          <th>Due</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        ${tasks.map(t => `
          <tr>
            <td>${escapeHtml(t.title)}</td>
            <td>${escapeHtml(t.owner || '‚Äî')}</td>
            <td>${escapeHtml(t.due || '‚Äî')}</td>
            <td><span class="chip ${t.status === 'Done' ? 'success' : (t.status === 'Blocked' ? 'danger' : 'warn')}">${t.status}</span></td>
          </tr>
        `).join('')}
      </tbody>
    </table>
  </section>`;
}

function renderPlaces(places: any[]): string {
  return `
  <section class="section">
    <h2><span class="icon">${getIcon('link')}</span>Places & Links</h2>
    ${places.map(place => `
      <div class="card">
        <div><strong>${escapeHtml(place.title)}</strong> <span class="small">(${escapeHtml(place.domain)})</span></div>
        ${place.category ? `<div class="small">${escapeHtml(place.category)}</div>` : ''}
        ${place.notes ? `<div class="small">${escapeHtml(place.notes)}</div>` : ''}
        ${place.qrSvg ? `<div class="qr-container qr-small">${place.qrSvg}</div>` : ''}
        <div class="small">${escapeHtml(place.url)}</div>
      </div>
    `).join('')}
  </section>`;
}

function renderBroadcasts(broadcasts: any[]): string {
  return `
  <section class="section">
    <h2><span class="icon">${getIcon('broadcast')}</span>Broadcast Log</h2>
    <table class="table">
      <thead>
        <tr>
          <th>When</th>
          <th>Priority</th>
          <th>Message</th>
          <th>Read</th>
        </tr>
      </thead>
      <tbody>
        ${broadcasts.map(b => `
          <tr>
            <td>${escapeHtml(b.ts)}</td>
            <td><span class="chip ${b.priority === 'High' ? 'warn' : ''}">${b.priority || 'Normal'}</span></td>
            <td>${escapeHtml(b.message)}</td>
            <td>${escapeHtml(b.readRate || '‚Äî')}</td>
          </tr>
        `).join('')}
      </tbody>
    </table>
  </section>`;
}

function renderAttachments(attachments: any[]): string {
  return `
  <section class="section">
    <h2><span class="icon">${getIcon('attach')}</span>Attachments</h2>
    <table class="table">
      <thead>
        <tr>
          <th>File</th>
          <th>Type</th>
          <th>Uploaded by</th>
          <th>Date</th>
        </tr>
      </thead>
      <tbody>
        ${attachments.map(a => `
          <tr>
            <td>${escapeHtml(a.name)}</td>
            <td>${escapeHtml(a.type)}</td>
            <td>${escapeHtml(a.uploaded_by || '‚Äî')}</td>
            <td>${escapeHtml(a.date || '‚Äî')}</td>
          </tr>
        `).join('')}
      </tbody>
    </table>
  </section>`;
}

function getStyles(): string {
  // In production, read from styles.css file
  // For now, inline the critical styles
  return `
    :root { --primary: #1E3A8A; --accent: #2563EB; --muted: #6B7280; --success: #059669; --warning: #D97706; --danger: #DC2626; --hair: #E5E7EB; --bg: #FFFFFF; --ink: #0F172A; }
    * { box-sizing: border-box; margin: 0; padding: 0; }
    html { color: var(--ink); font-family: system-ui, -apple-system, sans-serif; line-height: 1.35; -webkit-font-smoothing: antialiased; font-variant-ligatures: none; background: var(--bg); }
    body { max-width: 640pt; margin: 0 auto; padding: 24pt; }
    h1, h2, h3 { font-family: system-ui, sans-serif; margin: 0 0 6pt 0; font-weight: 600; }
    h1 { font-size: 24pt; }
    h2 { font-size: 16pt; color: var(--primary); margin-top: 24pt; margin-bottom: 12pt; display: flex; align-items: center; gap: 6pt; }
    h3 { font-size: 12pt; color: var(--muted); text-transform: uppercase; letter-spacing: 0.06em; }
    p { margin: 0 0 8pt 0; font-size: 11pt; }
    .section { margin: 24pt 0 12pt; page-break-inside: avoid; }
    .card { border: 1px solid var(--hair); border-radius: 6pt; padding: 10pt; margin-bottom: 8pt; page-break-inside: avoid; }
    .table { width: 100%; border-collapse: collapse; margin: 8pt 0; }
    .table th, .table td { padding: 6pt 8pt; font-size: 10.5pt; vertical-align: top; text-align: left; }
    .table th { color: var(--muted); font-weight: 600; border-bottom: 1px solid var(--hair); background: #FAFAFB; }
    .table tr { page-break-inside: avoid; }
    .table tbody tr:nth-child(even) { background: #FAFAFB; }
    .money { text-align: right; font-variant-numeric: tabular-nums; font-size: 10pt; }
    .chip { display: inline-block; padding: 2pt 6pt; border-radius: 999px; font-size: 9pt; border: 1px solid var(--hair); color: var(--muted); background: #FAFAFB; }
    .chip.success { color: #065F46; border-color: #A7F3D0; background: #ECFDF5; }
    .chip.warn { color: #7C2D12; border-color: #FDE68A; background: #FFFBEB; }
    .chip.danger { color: #991B1B; border-color: #FCA5A5; background: #FEF2F2; }
    hr.hair { border: 0; border-top: 1px solid var(--hair); margin: 8pt 0; }
    .icon { width: 14pt; height: 14pt; vertical-align: -2pt; display: inline-block; color: var(--primary); }
    .small { color: var(--muted); font-size: 10pt; }
    .tt { font-variant-numeric: tabular-nums; font-size: 10pt; }
    .cover { text-align: center; padding: 24pt 0; border-bottom: 2px solid var(--hair); margin-bottom: 24pt; }
    .cover h1 { font-size: 28pt; margin-bottom: 12pt; }
    .cover .subtitle { font-size: 12pt; color: var(--muted); margin-bottom: 16pt; }
    .cover .meta { font-size: 10pt; color: var(--muted); margin-top: 8pt; }
    .qr-container { margin: 12pt 0; text-align: center; }
    .qr-small { width: 48pt; height: 48pt; display: inline-block; }
    .qr-large { width: 96pt; height: 96pt; display: inline-block; }
    .day-header { font-weight: 600; color: var(--primary); margin-top: 12pt; padding-bottom: 4pt; border-bottom: 1px solid var(--hair); }
    .event-item { margin: 8pt 0; padding-left: 12pt; }
    .payment-split { margin-top: 6pt; font-size: 10pt; }
    .footer-text { font-size: 8pt; color: var(--muted); text-align: center; margin-top: 24pt; padding-top: 12pt; border-top: 1px solid var(--hair); }
  `;
}

function escapeHtml(text: string): string {
  const div = { textContent: text } as any;
  return (div.textContent || '').replace(/[&<>"']/g, (m: string) => ({
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#039;'
  }[m] || m));
}
