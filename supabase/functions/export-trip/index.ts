/**
 * Export Trip PDF Edge Function
 * Generates production-quality PDFs with embedded fonts and proper encoding
 */

import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.57.2";
import { createSecureResponse, createErrorResponse, createOptionsResponse } from "../_shared/securityHeaders.ts";
import { sanitizeErrorForClient, logError } from "../_shared/errorHandling.ts";
import { getTripData } from './data.ts';
import { renderTemplate } from './template.ts';
import { slug, formatTimestamp } from './util.ts';
import type { ExportRequest, ExportLayout, ExportSection } from './types.ts';

const logStep = (step: string, details?: unknown) => {
  const detailsStr = details ? ` - ${JSON.stringify(details)}` : '';
  console.log(`[EXPORT-TRIP] ${step}${detailsStr}`);
};

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return createOptionsResponse();
  }

  const supabaseClient = createClient(
    Deno.env.get("SUPABASE_URL") ?? "",
    Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? "",
    { auth: { persistSession: false } }
  );

  try {
    logStep("Function started");

    // Authenticate user
    const authHeader = req.headers.get("Authorization");
    if (!authHeader) {
      return createErrorResponse('Authentication required', 401);
    }

    const token = authHeader.replace("Bearer ", "");
    const { data: userData, error: userError } = await supabaseClient.auth.getUser(token);
    if (userError || !userData.user) {
      return createErrorResponse('Unauthorized', 401);
    }
    const user = userData.user;
    logStep("User authenticated", { userId: user.id });

    // Parse request
    const body: ExportRequest = await req.json();
    const {
      tripId,
      sections = [],
      layout = 'onepager' as ExportLayout,
      privacyRedaction = false,
      paper = 'letter'
    } = body;

    // Validate layout
    if (layout !== 'onepager' && layout !== 'pro') {
      return createErrorResponse('Invalid layout. Must be "onepager" or "pro"', 400);
    }

    if (!tripId || !Array.isArray(sections)) {
      return createErrorResponse('Invalid request: tripId and sections required', 400);
    }
    logStep("Request parsed", { tripId, sections, layout });

    // Verify user has access to this trip
    const { data: tripMember } = await supabaseClient
      .from('trip_members')
      .select('role')
      .eq('trip_id', tripId)
      .eq('user_id', user.id)
      .single();

    if (!tripMember) {
      return createErrorResponse('Access denied: You are not a member of this trip', 403);
    }
    logStep("Trip access verified");

    // Export is now available to everyone - no tier check needed
    logStep("PDF export access granted (no tier restriction)");

    // Fetch and transform trip data
    const exportData = await getTripData(
      supabaseClient,
      tripId,
      sections as ExportSection[],
      layout,
      privacyRedaction
    );
    logStep("Trip data fetched and transformed");

    // Render HTML
    const html = renderTemplate(exportData);
    logStep("HTML template rendered");

    // For now, return the HTML (in production, use Puppeteer to convert to PDF)
    // This requires Puppeteer/Chrome setup in Deno which needs additional configuration
    
    // Temporary: Return HTML for testing
    const filename = `Trip_${slug(exportData.tripTitle)}_${layout}_${formatTimestamp()}`;
    
    return new Response(html, {
      headers: {
        'Content-Type': 'text/html',
        'Content-Disposition': `attachment; filename="${filename}.html"`,
      },
    });

    // TODO: Production implementation with Puppeteer
    // const browser = await puppeteer.launch({ args: ["--no-sandbox"], headless: true });
    // const page = await browser.newPage();
    // await page.setContent(html, { waitUntil: "networkidle0" });
    // await page.emulateMediaType("print");
    // const pdf = await page.pdf({
    //   printBackground: true,
    //   format: paper === "a4" ? "A4" : "Letter",
    //   displayHeaderFooter: true,
    //   headerTemplate: `<span></span>`,
    //   footerTemplate: `
    //     <div style="font-size:8pt; width:100%; padding:0 24pt; display:flex; justify-content:space-between;">
    //       <div>Generated by Chravel • ${exportData.generatedAtLocal}</div>
    //       <div>Trip ID: ${exportData.tripId} • <span class="pageNumber"></span>/<span class="totalPages"></span></div>
    //     </div>`,
    //   margin: { top: "12mm", right: "12mm", bottom: "14mm", left: "12mm" },
    // });
    // await browser.close();
    // 
    // return new Response(pdf, {
    //   headers: {
    //     "Content-Type": "application/pdf",
    //     "Content-Disposition": `attachment; filename="${slug(exportData.tripTitle)}_${layout}_${fmtTs()}.pdf"`,
    //   },
    // });

  } catch (error) {
    logError('EXPORT_TRIP', error);
    return createErrorResponse(sanitizeErrorForClient(error), 500);
  }
});

