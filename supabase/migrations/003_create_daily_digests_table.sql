-- Create a table for daily message digests
CREATE TABLE IF NOT EXISTS daily_digests (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    trip_id UUID REFERENCES trips(id) ON DELETE CASCADE, -- Optional: if digest is per trip
    digest_title TEXT, -- e.g., "Your Daily Summary for 'Spring Break Trip'"
    digest_content TEXT NOT NULL, -- The summarized content from AI
    summary_prompt TEXT, -- Store the prompt used for generation, for debugging/refinement
    generated_at_utc TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,

    -- For tracking delivery and read status
    delivered_via VARCHAR(50), -- e.g., 'push_notification', 'in_app_message'
    delivered_at_utc TIMESTAMPTZ,
    read_at_utc TIMESTAMPTZ,

    -- Metadata from generation
    source_message_ids UUID[], -- Array of message IDs that were summarized
    token_usage JSONB, -- Store token usage from OpenAI if available {prompt_tokens, completion_tokens, total_tokens}

    created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Indexes for querying
CREATE INDEX IF NOT EXISTS idx_daily_digests_user_id_generated_at ON daily_digests(user_id, generated_at_utc DESC);
CREATE INDEX IF NOT EXISTS idx_daily_digests_trip_id ON daily_digests(trip_id);

-- Trigger to update updated_at on row update (using existing function from previous migration)
CREATE TRIGGER set_daily_digests_timestamp
BEFORE UPDATE ON daily_digests
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

COMMENT ON COLUMN daily_digests.trip_id IS 'Optional: Associates digest with a specific trip. Can be NULL if digest is cross-trip for a user.';
COMMENT ON COLUMN daily_digests.digest_content IS 'The summarized content generated by AI.';
COMMENT ON COLUMN daily_digests.source_message_ids IS 'Array of original message IDs that contributed to this digest.';

-- Note:
-- - You'll need a way to get all messages for a user from the last 24 hours.
--   This might involve querying your main 'messages' or 'chat_messages' table.
--   The structure of that table is not defined here but is crucial for the digest generator function.
-- - Consider how to identify "participants" of a trip to generate digests for them.
--   This usually means a 'trip_participants' table or similar, linking users to trips.
