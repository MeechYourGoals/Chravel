-- Phase 1: Database Schema & pgvector Setup for Trip-Scoped RAG (Fixed)

-- 1. Enable pgvector extension for vector similarity search
CREATE EXTENSION IF NOT EXISTS vector WITH SCHEMA extensions;

-- 2. Create trip_embeddings table
CREATE TABLE IF NOT EXISTS trip_embeddings (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  trip_id TEXT NOT NULL REFERENCES trips(id) ON DELETE CASCADE,
  source_type TEXT NOT NULL CHECK (source_type IN ('chat', 'task', 'poll', 'payment', 'broadcast', 'file', 'link', 'calendar')),
  source_id UUID NOT NULL,
  content_text TEXT NOT NULL,
  embedding extensions.vector(768), -- Gemini text-embedding-004 uses 768 dimensions
  metadata JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE(trip_id, source_type, source_id)
);

-- 3. Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_trip_embeddings_trip_id ON trip_embeddings(trip_id);
CREATE INDEX IF NOT EXISTS idx_trip_embeddings_source ON trip_embeddings(source_type, source_id);
CREATE INDEX IF NOT EXISTS idx_trip_embeddings_vector ON trip_embeddings USING ivfflat (embedding extensions.vector_cosine_ops) WITH (lists = 100);

-- 4. Create vector similarity search function with proper schema path
CREATE OR REPLACE FUNCTION match_trip_embeddings(
  query_embedding extensions.vector(768),
  trip_id_input TEXT,
  match_threshold FLOAT DEFAULT 0.7,
  match_count INT DEFAULT 10
)
RETURNS TABLE (
  id UUID,
  source_type TEXT,
  source_id UUID,
  content_text TEXT,
  similarity FLOAT,
  metadata JSONB
)
LANGUAGE sql STABLE
SECURITY DEFINER
SET search_path = public, extensions
AS $$
  SELECT
    id,
    source_type,
    source_id,
    content_text,
    1 - (trip_embeddings.embedding <=> query_embedding) AS similarity,
    metadata
  FROM trip_embeddings
  WHERE trip_id = trip_id_input
    AND embedding IS NOT NULL
    AND 1 - (trip_embeddings.embedding <=> query_embedding) > match_threshold
  ORDER BY similarity DESC
  LIMIT match_count;
$$;

-- 5. Enable Row Level Security
ALTER TABLE trip_embeddings ENABLE ROW LEVEL SECURITY;

-- 6. Create RLS policies
CREATE POLICY "Trip members can view embeddings"
  ON trip_embeddings FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM trip_members tm
      WHERE tm.trip_id = trip_embeddings.trip_id
        AND tm.user_id = auth.uid()
    )
  );

CREATE POLICY "System can manage embeddings"
  ON trip_embeddings FOR ALL
  USING (auth.uid() IS NOT NULL)
  WITH CHECK (auth.uid() IS NOT NULL);

-- 7. Add trigger for updated_at timestamp
CREATE TRIGGER update_trip_embeddings_updated_at
  BEFORE UPDATE ON trip_embeddings
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- 8. Add comments for documentation
COMMENT ON TABLE trip_embeddings IS 'Stores vector embeddings for trip content (chat, tasks, polls, etc.) to enable semantic search and RAG-based AI responses';
COMMENT ON COLUMN trip_embeddings.embedding IS 'Vector embedding (768 dimensions) generated by Gemini text-embedding-004 model';
COMMENT ON FUNCTION match_trip_embeddings IS 'Performs cosine similarity search to find relevant trip content based on query embedding';